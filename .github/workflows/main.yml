name: Org CI Workflow

on:
  workflow_call:
    inputs:
      php-version:
        required: false
        type: string
        default: '8.2'
      node-version:
        required: false
        type: string
        default: '18'

jobs:
  backend-tests:
    name: Laravel Backend Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if composer.json exists
        id: check_composer
        run: |
          if [ -f composer.json ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup PHP
        if: steps.check_composer.outputs.found == 'true'
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ inputs.php-version }}
          extensions: mbstring, bcmath, intl

      - name: Cache Composer dependencies
        if: steps.check_composer.outputs.found == 'true'
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer dependencies
        if: steps.check_composer.outputs.found == 'true'
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: Run Pint (Laravel code style)
        if: steps.check_composer.outputs.found == 'true'
        run: vendor/bin/pint --test 2>&1 | tee backend.log

      - name: Run PHPUnit tests
        if: steps.check_composer.outputs.found == 'true'
        run: php artisan test --parallel --stop-on-failure

      - name: Run ESLint for Laravel JS (resources/)
        run: |
          if [ -d resources ]; then
            npm install -g eslint prettier
            eslint "resources/**/*.js" || true
            prettier --check "resources/**/*.js" || true
          fi
      - name: Upload backend log
        uses: actions/upload-artifact@v3
        with:
          name: backend-log
          path: backend.log

  frontend-tests:
    name: React/Expo Frontend Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check if package.json exists
        id: check_package
        run: |
          if [ -f package.json ]; then
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.check_package.outputs.found == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Cache npm dependencies
        if: steps.check_package.outputs.found == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.check_package.outputs.found == 'true'
        run: npm ci

      - name: Run ESLint
        if: steps.check_package.outputs.found == 'true'
        run: npm run lint --if-present 2>&1 | tee frontend.log

      - name: Run Prettier
        if: steps.check_package.outputs.found == 'true'
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

      - name: Run tests
        if: steps.check_package.outputs.found == 'true'
        run: npm test --if-present -- --watchAll=false 2>&1 | tee frontend.log

  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    steps:
      - name: Send notification to Discord
        run: |
          STATUS="✅ Success"
          if [ "${{ needs.backend-tests.result }}" != "success" ] || [ "${{ needs.frontend-tests.result }}" != "success" ]; then
          STATUS="❌ Failed"
          fi

        
          BACKEND_LOG=$(tail -n 20 logs/backend-log/backend.log 2>/dev/null || echo "No backend logs")
          FRONTEND_LOG=$(tail -n 20 logs/frontend-log/frontend.log 2>/dev/null || echo "No frontend logs")

          BACKEND_LOG=$(echo "$BACKEND_LOG" | jq -Rs .)
          FRONTEND_LOG=$(echo "$FRONTEND_LOG" | jq -Rs .)

          curl -X POST "https://YOUR_NGROK_URL/github" \
          -H "Content-Type: application/json" \
          -d "{
            \"status\": \"$STATUS\",
            \"repo\": \"${{ github.repository }}\",
            \"run_id\": \"${{ github.run_id }}\",
            \"pr\": \"${{ github.event.number }}\",
            \"backend_log\": $BACKEND_LOG,
            \"frontend_log\": $FRONTEND_LOG
          }"
