name: Fix & Check (Remote Trigger)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  repository_dispatch:
    types: [trigger-fix-check]

jobs:
  pr-checks:
    name: Run Fix & Check on PR
    runs-on: ubuntu-latest

    steps:
      # Checkout the PR from payload (or normal PR if triggered by PR event)
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.repository.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name == 'pull_request'

      - name: Checkout PR from another repo (remote trigger)
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.branch_repo }}
          ref: refs/pull/${{ github.event.client_payload.pull_request }}/merge
          token: ${{ secrets.PAT_FOR_ORG_REPOS }}
          path: project
        if: github.event_name == 'repository_dispatch'

      # Setup PHP
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      # Install PHP dependencies
      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
        working-directory: ${{ github.event_name == 'repository_dispatch' && 'project' || '.' }}

      # Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install Node dependencies
      - name: Install NPM packages
        run: npm install
        working-directory: ${{ github.event_name == 'repository_dispatch' && 'project' || '.' }}
        continue-on-error: true

      # ESLint
      - name: Run ESLint
        id: eslint
        continue-on-error: true
        run: |
          echo "========== ESLINT ==========" > eslint.txt
          npm run lint:fix >> eslint.txt 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          exit 0
        working-directory: ${{ github.event_name == 'repository_dispatch' && 'project' || '.' }}
      - uses: actions/upload-artifact@v4
        with:
          name: eslint
          path: eslint.txt

      # Prettier
      - name: Run Prettier
        id: prettier
        continue-on-error: true
        run: |
          echo "========== PRETTIER ==========" > prettier.txt
          npm run format >> prettier.txt 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          exit 0
        working-directory: ${{ github.event_name == 'repository_dispatch' && 'project' || '.' }}
      - uses: actions/upload-artifact@v4
        with:
          name: prettier
          path: prettier.txt

      # Pint
      - name: Run Pint
        id: pint
        continue-on-error: true
        run: |
          echo "========== PINT ==========" > pint.txt
          ./vendor/bin/pint >> pint.txt 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          exit 0
        working-directory: ${{ github.event_name == 'repository_dispatch' && 'project' || '.' }}
      - uses: actions/upload-artifact@v4
        with:
          name: pint
          path: pint.txt

      # PHPStan
      - name: Run PHPStan
        id: phpstan
        continue-on-error: true
        run: |
          echo "========== PHPSTAN ==========" > phpstan.txt
          ./vendor/bin/phpstan analyse --memory-limit=1G >> phpstan.txt 2>&1
          echo "exit_code=$?" >> $GITHUB_OUTPUT
          exit 0
        working-directory: ${{ github.event_name == 'repository_dispatch' && 'project' || '.' }}
      - uses: actions/upload-artifact@v4
        with:
          name: phpstan
          path: phpstan.txt

      # Merge logs
      - name: Merge logs
        run: cat eslint.txt prettier.txt pint.txt phpstan.txt 2>/dev/null > merge.txt

      - uses: actions/upload-artifact@v4
        with:
          name: merged-log
          path: merge.txt

      # Notify Discord Bot
      - name: Notify Discord Bot
        if: always()
        run: |
          ESLINT_STATUS="${{ steps.eslint.outputs.exit_code }}"
          PRETTIER_STATUS="${{ steps.prettier.outputs.exit_code }}"
          PINT_STATUS="${{ steps.pint.outputs.exit_code }}"
          PHPSTAN_STATUS="${{ steps.phpstan.outputs.exit_code }}"

          FINAL_RESULT="success"
          for s in "$ESLINT_STATUS" "$PRETTIER_STATUS" "$PINT_STATUS" "$PHPSTAN_STATUS"; do
            if [[ "$s" == *"‚ùå FAIL"* ]]; then
              FINAL_RESULT="failure"
              break
            fi
          done

          echo "Final result: $FINAL_RESULT"
          LOG_CONTENT=$(jq -Rs . < merge.txt)

          curl -X POST "${{ secrets.BOT_URL }}" \
            -H "Authorization: Bearer ${{ secrets.BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"repo\": \"${{ github.repository }}\",
              \"run_id\": \"${{ github.run_id }}\",
              \"pr\": \"${{ github.event.client_payload.pull_request || github.event.pull_request.number }}\",
              \"status\": \"$FINAL_RESULT\",
              \"pr_user\": \"${{ github.event.client_payload.pr_user || github.event.pull_request.user.login }}\",
              \"eslint_status\": \"$ESLINT_STATUS\",
              \"prettier_status\": \"$PRETTIER_STATUS\",
              \"pint_status\": \"$PINT_STATUS\",
              \"phpstan_status\": \"$PHPSTAN_STATUS\",
              \"log\": $LOG_CONTENT
            }"
